extend schema @mutation(operations: [])
scalar JSON

type AssociatedEntity {
	EntityClass: String!
	EntityName: String!
	EntityType: String!
	associatedWithClinicalTrials: [ClinicalTrial!]! @relationship(type: "associated_with", direction: OUT)
}

type ClinicalTrial {
	Acronym: String!
	BriefSummary: String!
	BriefTitle: String!
	CompletionDate: String!
	CompletionDateType: String!
	DateCreatedRDAS: String!
	IPDSharing: String!
	IPDSharingAccessCriteria: String!
	IPDSharingDescription: String!
	IPDSharingTimeFrame: String!
	LastKnownStatus: String!
	LastUpdatePostDate: String!
	LastUpdatePostDateType: String!
	LastUpdateSubmitDate: String!
	LastUpdatedRDAS: String!
	NCTId: String!
	OfficialTitle: String!
	OverallStatus: String!
	PatientRegistry: Boolean!
	Phase: String
	PrimaryCompletionDate: String!
	PrimaryCompletionDateType: String!
	ResultsFirstPostDate: String!
	ResultsFirstPostDateType: String!
	ResultsFirstPostedQCCommentsDate: String!
	StartDate: String!
	StartDateType: String!
	StudyType: String!
	associatedEntitiesassociatedWith: [AssociatedEntity!]! @relationship(type: "associated_with", direction: IN)
	hasContactContacts: [Contact!]! @relationship(type: "has_contact", direction: OUT)
	hasInterventionInterventions: [Intervention!]! @relationship(type: "has_intervention", direction: OUT)
	hasOutcomePrimaryOutcomes: [PrimaryOutcome!]! @relationship(type: "has_outcome", direction: OUT)
	hasParticipantInfoParticipants: [Participant!]! @relationship(type: "has_participant_info", direction: OUT)
	hasStudyDesignStudyDesigns: [StudyDesign!]! @relationship(type: "has_study_design", direction: OUT)
	inLocationsLocations: [Location!]! @relationship(type: "in_locations", direction: OUT)
	investigatesConditionConditions: [Condition!]! @relationship(type: "investigates_condition", direction: OUT)
	investigatorsinvestigates: [Investigator!]! @relationship(type: "investigates", direction: IN)
	mappedToGardGards: [GARD!]! @relationship(type: "mapped_to_gard", direction: OUT, properties: "MappedToGardProperties")
	referencesisAbout: [Reference!]! @relationship(type: "is_about", direction: IN)
}

type Condition {
  Condition: String!
  clinicalTrialsinvestigatesCondition: [ClinicalTrial!]!
    @relationship(type: "investigates_condition", direction: IN)
  mappedToGardGards: [GARD!]!
    @relationship(
      type: "mapped_to_gard"
      direction: OUT
      properties: "MappedToGardProperties"
    )
}

type Contact {
  ContactEmail: String!
  ContactName: String!
  ContactPhone: String!
  ContactPhoneExt: String!
  ContactRole: String!
  ContactScope: String!
  clinicalTrialshasContact: [ClinicalTrial!]!
    @relationship(type: "has_contact", direction: IN)
  contactForLocationLocations: [Location!]!
    @relationship(type: "contact_for_location", direction: OUT)
  investigatorshasContact: [Investigator!]!
    @relationship(type: "has_contact", direction: IN)
}

type Drug {
  ACTIVATED: [String]
  ANDA: [String]
  ATC: [String]
  AVAILABLE_STRENGTH: [String]
  BLA: [String]
  BN_CARDINALITY: [String]
  CVX: [String]
  DRUGBANK: [String]
  GENERAL_CARDINALITY: [String]!
  HUMAN_DRUG: [String]
  IN_EXPRESSED_FLAG: [String]
  MMSL_CODE: [String]
  NADA: [String]
  NDA: [String]
  NHRIC: [String]
  ORIG_CODE: [String]
  ORIG_SOURCE: [String]
  PRESCRIBABLE: [String]
  PrescribableSynonym: [String]
  QUANTITY: [String]
  RXNAV_HUMAN_DRUG: [String]
  RXNAV_STR: [String]!
  RXNAV_VET_DRUG: [String]
  RxCUI: [String]!
  RxNormID: BigInt!
  RxNormName: [String]!
  RxNormSynonym: [String]
  SCHEDULE: [String]
  SNOMEDCT: [String]
  SPL_SET_ID: [String]
  STRENGTH: [String]
  Source: [String]
  TTY: [String]!
  TallmanSynonym: [String]
  UNII_CODE: [String]
  USP: [String]
  VET_DRUG: [String]
  VUID: [String]
  interventionsmappedToRxnorm: [Intervention!]!
    @relationship(
      type: "mapped_to_rxnorm"
      direction: IN
      properties: "MappedToRxnormProperties"
    )
}

type GARD {
  GardId: String!
  GardName: String!
  Synonyms: [String]!
  clinicalTrialsmappedToGard: [ClinicalTrial!]!
    @relationship(
      type: "mapped_to_gard"
      direction: IN
      properties: "MappedToGardProperties"
    )
  conditionsmappedToGard: [Condition!]!
    @relationship(
      type: "mapped_to_gard"
      direction: IN
      properties: "MappedToGardProperties"
    )
}
type Intervention {
  InterventionDescription: String!
  InterventionName: String!
  InterventionType: String!
  clinicalTrialshasIntervention: [ClinicalTrial!]!
    @relationship(type: "has_intervention", direction: IN)
  mappedToRxnormDrugs: [Drug!]!
    @relationship(
      type: "mapped_to_rxnorm"
      direction: OUT
      properties: "MappedToRxnormProperties"
    )
}

type Investigator {
  OfficialAffiliation: String!
  OfficialName: String!
  OfficialRole: String!
  hasContactContacts: [Contact!]!
    @relationship(type: "has_contact", direction: OUT)
  investigatesClinicalTrials: [ClinicalTrial!]!
    @relationship(type: "investigates", direction: OUT)
}

type Location {
  LocationCity: String!
  LocationCountry: String!
  LocationFacility: String!
  LocationState: String!
  LocationStatus: String!
  LocationZip: String!
  clinicalTrialsinLocations: [ClinicalTrial!]!
    @relationship(type: "in_locations", direction: IN)
  contactscontactForLocation: [Contact!]!
    @relationship(type: "contact_for_location", direction: IN)
}

type MappedToGardProperties @relationshipProperties {
  MatchedTermRDAS: String
}

type MappedToRxnormProperties @relationshipProperties {
  WITH_SPACY: Boolean!
}

type Participant {
  EligibilityCriteria: String!
  EnrollmentType: String!
  Gender: String!
  MaximumAge: String!
  MinimumAge: String!
  StdAge: [String]!
  clinicalTrialshasParticipantInfo: [ClinicalTrial!]!
    @relationship(type: "has_participant_info", direction: IN)
}

type PrimaryOutcome {
  PrimaryOutcomeDescription: String!
  PrimaryOutcomeMeasure: String!
  PrimaryOutcomeTimeFrame: String!
  clinicalTrialshasOutcome: [ClinicalTrial!]!
    @relationship(type: "has_outcome", direction: IN)
}

type Reference {
  Citation: String!
  ReferencePMID: String!
  ReferenceType: String!
  isAboutClinicalTrials: [ClinicalTrial!]!
    @relationship(type: "is_about", direction: OUT)
}

type StudyDesign {
  DesignAllocation: String!
  DesignInterventionModel: String!
  DesignInterventionModelDescription: String!
  DesignMasking: String!
  DesignObservationalModel: String!
  DesignPrimaryPurpose: String!
  DesignTimePerspective: String!
  DetailedDescription: String!
  clinicalTrialshasStudyDesign: [ClinicalTrial!]!
    @relationship(type: "has_study_design", direction: IN)
}

type CTFilters {
  trialsByStatus: [FilterCount]
  trialsByType: [FilterCount]
  trialsByPhase: [FilterCount]
}

type FilterCount {
  term: String
  count: Int
  label: String
}

type Query {
  trialsByStatus(where: ClinicalTrialWhere): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:GARD)
            WHERE n.GardId = $where.mappedToGardGards_SOME.GardId
            MATCH (n)-[m:mapped_to_gard]-(cl:ClinicalTrial)
                       WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                       AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                       AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
                                 WITH cl.OverallStatus as status, count(distinct(cl)) as ct
                 return {term: status, count:ct, label: 'OverallStatus'} as data order by ct DESC
      """
      columnName: "data"
    )
}

type Query {
  trialsByType(where: ClinicalTrialWhere): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:GARD)
            WHERE n.GardId = $where.mappedToGardGards_SOME.GardId
            MATCH (n)-[m:mapped_to_gard]-(cl:ClinicalTrial)
                       WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                       AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                       AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
              WITH cl.StudyType as studyType, count(distinct(cl)) as ct
            return {term: studyType, count:ct, label: 'StudyType'} as data order by ct DESC
      """
      columnName: "data"
    )
}

type Query {
  trialsByPhase(where: ClinicalTrialWhere): [FilterCount]
    @cypher(
      statement: """
      MATCH (n:GARD)
            WHERE n.GardId = $where.mappedToGardGards_SOME.GardId
            MATCH (n)-[m:mapped_to_gard]-(cl:ClinicalTrial)
                       WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                       AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                       AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
        WITH cl.Phase AS phase, count(distinct(cl)) as ct
       return {term: phase, count:ct, label: 'Phase'} as data order by phase ASC
      """
      columnName: "data"
    )
}

type Query {
  allClinicalTrialsFilters(where: ClinicalTrialWhere): CTFilters
    @cypher(
      statement: """
      MATCH (n:GARD)
      WHERE n.GardId = $where.mappedToGardGards_SOME.GardId
      MATCH (n)-[m:mapped_to_gard]-(cl:ClinicalTrial)
                 WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                 AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                 AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
                 with collect(distinct(cl)) as trials
                  with
                  collect {
                  unwind trials as tr
                  WITH tr.OverallStatus as status, count(distinct(tr)) as statusCT
                  return {term: status, count:statusCT, label: 'OverallStatus'}
                  } as statuses,
                  collect {
                  unwind trials as tr
                  WITH tr.Phase as phase, count(distinct(tr)) as phaseCT
                  return {term: phase, count:phaseCT, label: 'Phase'}
                  } as phases,
                  collect {
                  unwind trials as tr
                  WITH tr.StudyType as studyType, count(distinct(tr)) as studyTypeCT
                  return {term: studyType, count:studyTypeCT, label: 'StudyType'}
                  } as studyTypes
                return {trialsByStatus: statuses, trialsByPhase: phases, trialsByType: studyTypes} as data
      """
      columnName: "data"
    )
}

type Query {
  allDiseaseClinicalTrialsFilters: CTFilters
    @cypher(
      statement: """
      match (cl: ClinicalTrial)
             with collect(distinct(cl)) as trials
                        with
                        collect {
                        unwind trials as tr
                        WITH tr.OverallStatus as status, count(distinct(tr)) as statusCT
                        return {term: status, count:statusCT, label: 'OverallStatus'}
                        } as statuses,
                        collect {
                        unwind trials as tr
                        WITH tr.Phase as phase, count(distinct(tr)) as phaseCT
                        return {term: phase, count:phaseCT, label: 'Phase'}
                        } as phases,
                        collect {
                        unwind trials as tr
                        WITH tr.StudyType as studyType, count(distinct(tr)) as studyTypeCT
                        return {term: studyType, count:studyTypeCT, label: 'StudyType'}
                        } as studyTypes
                      return {trialsByStatus: statuses, trialsByPhase: phases, trialsByType: studyTypes} as data
      """
      columnName: "data"
    )
}
