extend schema @mutation(operations: [])
scalar JSON

type ClinicalTrial {
  Acronym: String
  BriefSummary: String!
  BriefTitle: String!
  CompletionDate: String
  CompletionDateType: String
  DateCreatedRDAS: String!
  LastKnownStatus: String
  LastUpdatePostDate: String!
  LastUpdatePostDateType: String!
  LastUpdateSubmitDate: String!
  LastUpdatedRDAS: String!
  NCTId: String!
  NCTIdAlias: [String]
  OfficialTitle: String
  OverallStatus: String
  Phase: String
  PrimaryCompletionDate: String
  PrimaryCompletionDateType: String
  ResultsFirstPostDate: String
  ResultsFirstPostDateType: String
  ResultsFirstPostedQCCommentsDate: String
  ResultsFirstPostedQCCommentsDateType: String
  StartDate: String
  StartDateType: String
  StudyFirstPostDate: String!
  StudyFirstPostDateType: String!
  StudyType: String
  collaboratedWithCollaborators: [Collaborator!]!
    @relationship(type: "collaborated_with", direction: OUT)
  conductedByOrganizations: [Organization!]!
    @relationship(type: "conducted_by", direction: OUT)
  expandedAccessInfoExpandedAccesses: [ExpandedAccess!]!
    @relationship(type: "expanded_access_info", direction: OUT)
  hasIndividualPatientDataIndividualPatientData: [IndividualPatientData!]!
    @relationship(type: "has_individual_patient_data", direction: OUT)
  hasInterventionInterventions: [Intervention!]!
    @relationship(type: "has_intervention", direction: OUT)
  hasMetamapAnnotationTrialAnnotations: [TrialAnnotation!]!
    @relationship(
      type: "has_metamap_annotation"
      direction: OUT
      properties: "HasMetamapAnnotationProperties"
    )
  hasOutcomePrimaryOutcomes: [PrimaryOutcome!]!
    @relationship(type: "has_outcome", direction: OUT)
  hasParticipantInfoParticipants: [Participant!]!
    @relationship(type: "has_participant_info", direction: OUT)
  hasStudyDesignStudyDesigns: [StudyDesign!]!
    @relationship(type: "has_study_design", direction: OUT)
  inLocationsLocations: [Location!]!
    @relationship(type: "in_locations", direction: OUT)
  investigatesConditionConditions: [Condition!]!
    @relationship(type: "investigates_condition", direction: OUT)
  investigatorsinvestigates: [Investigator!]!
    @relationship(type: "investigates", direction: IN)
  patientRegistryInfoPatientRegistries: [PatientRegistry!]!
    @relationship(type: "patient_registry_info", direction: OUT)
  referencesisAbout: [Reference!]!
    @relationship(type: "is_about", direction: IN)
  sponsoredBySponsors: [Sponsor!]!
    @relationship(type: "sponsored_by", direction: OUT)
}

type Collaborator {
  CollaboratorClass: String!
  CollaboratorName: String!
  clinicalTrialscollaboratedWith: [ClinicalTrial!]!
    @relationship(type: "collaborated_with", direction: IN)
}

type Condition {
  Condition: String!
  clinicalTrialsinvestigatesCondition: [ClinicalTrial!]!
    @relationship(type: "investigates_condition", direction: IN)
  hasAnnotationConditionAnnotations: [ConditionAnnotation!]!
    @relationship(
      type: "has_annotation"
      direction: OUT
      properties: "HasAnnotationProperties"
    )
}

type ConditionAnnotation {
  MATCH_TYPE: String!
  SEMANTIC_TYPE: [String]
  UMLSPreferredName: String!
  UMLS_CUI: String
  conditionshasAnnotation: [Condition!]!
    @relationship(
      type: "has_annotation"
      direction: IN
      properties: "HasAnnotationProperties"
    )
  mappedToGardGards: [GARD!]!
    @relationship(type: "mapped_to_gard", direction: OUT)
}

type Drug {
  ACTIVATED: [String]
  ANDA: [String]
  ATC: [String]
  AVAILABLE_STRENGTH: [String]
  BLA: [String]
  BN_CARDINALITY: [String]
  CVX: [String]
  DRUGBANK: [String]
  GENERAL_CARDINALITY: [String]!
  HUMAN_DRUG: [String]
  IN_EXPRESSED_FLAG: [String]
  MESH: [String]
  MMSL_CODE: [String]
  NDA: [String]
  NHRIC: [String]
  ORIG_CODE: [String]
  ORIG_SOURCE: [String]
  PRESCRIBABLE: [String]
  PrescribableSynonym: [String]
  QUALITATIVE_DISTINCTION: [String]
  QUANTITY: [String]
  RXNAV_HUMAN_DRUG: [String]
  RXNAV_STR: [String]!
  RXNAV_VET_DRUG: [String]
  RxCUI: [String]!
  RxNormID: BigInt!
  RxNormName: [String]!
  RxNormSynonym: [String]
  SCHEDULE: [String]
  SNOMEDCT: [String]
  SPL_SET_ID: [String]
  STRENGTH: [String]
  Source: [String]
  TTY: [String]!
  TallmanSynonym: [String]
  UNII_CODE: [String]
  USP: [String]
  VET_DRUG: [String]
  VUID: [String]
  interventionsmappedToRxnorm: [Intervention!]!
    @relationship(
      type: "mapped_to_rxnorm"
      direction: IN
      properties: "MappedToRxnormProperties"
    )
}

type ExpandedAccess {
  ExpAccTypeIndividual: String
  ExpAccTypeIntermediate: String
  ExpAccTypeTreatment: String
  ExpandedAccessNCTId: String
  ExpandedAccessStatusForNCTId: String
  HasExpandedAccess: String
  clinicalTrialsexpandedAccessInfo: [ClinicalTrial!]!
    @relationship(type: "expanded_access_info", direction: IN)
}

type GARD {
  GardId: String!
  GardName: String!
  Synonyms: [String]!
  UMLS: [String]
  UMLS_Source: String!
  conditionAnnotationsmappedToGard: [ConditionAnnotation!]!
    @relationship(type: "mapped_to_gard", direction: IN)
}

type HasAnnotationProperties @relationshipProperties {
  FUZZY_SCORE: BigInt
  METAMAP_SCORE: BigInt
}

type HasMetamapAnnotationProperties @relationshipProperties {
  umls_score: BigInt!
}

type IndividualPatientData {
  IPDSharing: String!
  IPDSharingAccessCriteria: String
  IPDSharingDescription: String
  IPDSharingInfoType: [String]
  IPDSharingTimeFrame: String
  IPDSharingURL: String
  clinicalTrialshasIndividualPatientData: [ClinicalTrial!]!
    @relationship(type: "has_individual_patient_data", direction: IN)
}

type Intervention {
  InterventionDescription: String
  InterventionName: String
  InterventionType: String!
  clinicalTrialshasIntervention: [ClinicalTrial!]!
    @relationship(type: "has_intervention", direction: IN)
  mappedToRxnormDrugs: [Drug!]!
    @relationship(
      type: "mapped_to_rxnorm"
      direction: OUT
      properties: "MappedToRxnormProperties"
    )
}

type Investigator {
  ContactEmail: String
  ContactPhone: String
  OfficialAffiliation: String
  OfficialName: String!
  OfficialRole: String
  investigatesClinicalTrials: [ClinicalTrial!]!
    @relationship(type: "investigates", direction: OUT)
}

type Location {
  LocationCity: String
  LocationCountry: String
  LocationFacility: String
  LocationState: String
  LocationStatus: String
  LocationZip: String
  clinicalTrialsinLocations: [ClinicalTrial!]!
    @relationship(type: "in_locations", direction: IN)
}

type MappedToRxnormProperties @relationshipProperties {
  WITH_SPACY: Boolean!
}

type Organization {
  OrgClass: String!
  OrgName: String!
  OrgType: String!
  clinicalTrialsconductedBy: [ClinicalTrial!]!
    @relationship(type: "conducted_by", direction: IN)
}

type Participant {
  EligibilityCriteria: String
  EnrollmentCount: String
  EnrollmentType: String
  Gender: String
  GenderBased: String
  GenderDescription: String
  HealthyVolunteers: String
  MinimumAge: String
  StdAge: [String]!
  StudyPopulation: String
  clinicalTrialshasParticipantInfo: [ClinicalTrial!]!
    @relationship(type: "has_participant_info", direction: IN)
}

type PatientRegistry {
  PatientRegistry: String!
  clinicalTrialspatientRegistryInfo: [ClinicalTrial!]!
    @relationship(type: "patient_registry_info", direction: IN)
}

type PrimaryOutcome {
  PrimaryOutcomeDescription: String!
  PrimaryOutcomeMeasure: String!
  PrimaryOutcomeTimeFrame: String!
  clinicalTrialshasOutcome: [ClinicalTrial!]!
    @relationship(type: "has_outcome", direction: IN)
}

type Reference {
  ReferenceCitation: String!
  ReferencePMID: String
  ReferenceType: String!
  isAboutClinicalTrials: [ClinicalTrial!]!
    @relationship(type: "is_about", direction: OUT)
}

type Sponsor {
  LeadSponsorClass: String!
  LeadSponsorName: String!
  clinicalTrialssponsoredBy: [ClinicalTrial!]!
    @relationship(type: "sponsored_by", direction: IN)
}

type StudyDesign {
  DesignAllocation: String
  DesignInterventionModel: String
  DesignInterventionModelDescription: String
  DesignMasking: String
  DesignMaskingDescription: String
  DesignObservationalModel: [String]
  DesignPrimaryPurpose: String
  DesignTimePerspective: [String]
  DetailedDescription: String
  SamplingMethod: String
  clinicalTrialshasStudyDesign: [ClinicalTrial!]!
    @relationship(type: "has_study_design", direction: IN)
}

type TrialAnnotation {
  clinicalTrialshasMetamapAnnotation: [ClinicalTrial!]!
    @relationship(
      type: "has_metamap_annotation"
      direction: IN
      properties: "HasMetamapAnnotationProperties"
    )
  umls_concept: String!
  umls_cui: String!
  umls_types: [String]!
}

type UserTesting {
  Approved: String!
}

type CTFilters {
  trialsByStatus: [FilterCount]
  trialsByType: [FilterCount]
  trialsByPhase: [FilterCount]
}

type FilterCount {
  term: String
  count: Int
  label: String
}

type Query {
  trialsByStatus(where: ClinicalTrialWhere): [FilterCount]
    @cypher(
      statement: """
MATCH (n:GARD)
      WHERE n.GardId = $where.investigatesConditionConditions_SOME.hasAnnotationConditionAnnotations_SOME.mappedToGardGards_SOME.GardId
      MATCH (n)-[m:mapped_to_gard]-(a:ConditionAnnotation)-[h:has_annotation]-(c:Condition)-[i:investigates_condition]-(cl:ClinicalTrial)
                 WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                 AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                 AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
                           WITH cl.OverallStatus as status, count(distinct(cl)) as ct
           return {term: status, count:ct, label: 'OverallStatus'} as data order by ct DESC
      """
      columnName: "data"
    )
}

type Query {
  trialsByType(where: ClinicalTrialWhere): [FilterCount]
    @cypher(
      statement: """
     MATCH (n:GARD)
           WHERE n.GardId = $where.investigatesConditionConditions_SOME.hasAnnotationConditionAnnotations_SOME.mappedToGardGards_SOME.GardId
           MATCH (n)-[m:mapped_to_gard]-(a:ConditionAnnotation)-[h:has_annotation]-(c:Condition)-[i:investigates_condition]-(cl:ClinicalTrial)
                      WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                      AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                      AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
             WITH cl.StudyType as studyType, count(distinct(cl)) as ct
           return {term: studyType, count:ct, label: 'StudyType'} as data order by ct DESC
      """
      columnName: "data"
    )
}

type Query {
  trialsByPhase(where: ClinicalTrialWhere): [FilterCount]
    @cypher(
      statement: """
     MATCH (n:GARD)
           WHERE n.GardId = $where.investigatesConditionConditions_SOME.hasAnnotationConditionAnnotations_SOME.mappedToGardGards_SOME.GardId
           MATCH (n)-[m:mapped_to_gard]-(a:ConditionAnnotation)-[h:has_annotation]-(c:Condition)-[i:investigates_condition]-(cl:ClinicalTrial)
                      WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                      AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                      AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
       WITH cl.Phase AS phase, count(distinct(cl)) as ct
      return {term: phase, count:ct, label: 'Phase'} as data order by phase ASC
      """
      columnName: "data"
    )
}

type Query {
  allClinicalTrialsFilters(where: ClinicalTrialWhere): CTFilters
    @cypher(
      statement: """
      MATCH (n:GARD)
      WHERE n.GardId = $where.investigatesConditionConditions_SOME.hasAnnotationConditionAnnotations_SOME.mappedToGardGards_SOME.GardId
      MATCH (n)-[m:mapped_to_gard]-(a:ConditionAnnotation)-[h:has_annotation]-(c:Condition)-[i:investigates_condition]-(cl:ClinicalTrial)
                 WHERE (cl.StudyType IN $where.StudyType_IN OR $where.StudyType_IN IS NULL)
                 AND (cl.OverallStatus IN $where.OverallStatus_IN OR $where.OverallStatus_IN IS NULL)
                 AND (cl.Phase IN $where.Phase_IN OR $where.Phase_IN IS NULL)
                 with collect(distinct(cl)) as trials
                  with
                  collect {
                  unwind trials as tr
                  WITH tr.OverallStatus as status, count(distinct(tr)) as statusCT
                  return {term: status, count:statusCT, label: 'OverallStatus'}
                  } as statuses,
                  collect {
                  unwind trials as tr
                  WITH tr.Phase as phase, count(distinct(tr)) as phaseCT
                  return {term: phase, count:phaseCT, label: 'Phase'}
                  } as phases,
                  collect {
                  unwind trials as tr
                  WITH tr.StudyType as studyType, count(distinct(tr)) as studyTypeCT
                  return {term: studyType, count:studyTypeCT, label: 'StudyType'}
                  } as studyTypes
                return {trialsByStatus: statuses, trialsByPhase: phases, trialsByType: studyTypes} as data
      """
      columnName: "data"
    )
}

type Query {
  allDiseaseClinicalTrialsFilters: CTFilters
    @cypher(
      statement: """
      match (cl: ClinicalTrial)
             with collect(distinct(cl)) as trials
                        with
                        collect {
                        unwind trials as tr
                        WITH tr.OverallStatus as status, count(distinct(tr)) as statusCT
                        return {term: status, count:statusCT, label: 'OverallStatus'}
                        } as statuses,
                        collect {
                        unwind trials as tr
                        WITH tr.Phase as phase, count(distinct(tr)) as phaseCT
                        return {term: phase, count:phaseCT, label: 'Phase'}
                        } as phases,
                        collect {
                        unwind trials as tr
                        WITH tr.StudyType as studyType, count(distinct(tr)) as studyTypeCT
                        return {term: studyType, count:studyTypeCT, label: 'StudyType'}
                        } as studyTypes
                      return {trialsByStatus: statuses, trialsByPhase: phases, trialsByType: studyTypes} as data
      """
      columnName: "data"
    )
}
