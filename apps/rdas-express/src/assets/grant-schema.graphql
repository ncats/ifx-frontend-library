extend schema @mutation(operations: [])
scalar JSON

type Agent {
  coreProjectsFundedBy: [CoreProject!]!
    @relationship(type: "FUNDED_BY", direction: IN)
  name: String
}

type AnnotatedProperties @relationshipProperties {
  source: String
}

type Annotation {
  projectsAnnotated: [Project!]!
    @relationship(
      type: "ANNOTATED"
      direction: IN
      properties: "AnnotatedProperties"
    )
  semantic_types: [String]
  semantic_types_names: [String]
  umls_concept: String
  umls_cui: String
}

type ClinicalStudies {
  coreProjectsStudied: [CoreProject!]!
    @relationship(type: "STUDIED", direction: IN)
  gov_id: String
  status: String
  title: String
}

type CoreProject {
  core_project_num: String
  fundedByAgents: [Agent!]! @relationship(type: "FUNDED_BY", direction: OUT)
  patentedPatents: [Patent!]! @relationship(type: "PATENTED", direction: OUT)
  projectsUnderCore: [Project!]!
    @relationship(type: "UNDER_CORE", direction: IN)
  publishedPublications: [Publication!]!
    @relationship(type: "PUBLISHED", direction: OUT)
  rd_total_cost: BigInt
  studiedClinicalStudies: [ClinicalStudies!]!
    @relationship(type: "STUDIED", direction: OUT)
}

type GARD {
  GardId: String
  GardName: String
  Synonyms: [String]
  researchedByProjects: [Project!]!
    @relationship(
      type: "RESEARCHED_BY"
      direction: OUT
      properties: "ResearchedByProperties"
    )
}

type Journal {
  publicationsPublishedIn: [Publication!]!
    @relationship(
      type: "PUBLISHED_IN"
      direction: IN
      properties: "PublishedInProperties"
    )
  title: String
}

type Patent {
  coreProjectsPatented: [CoreProject!]!
    @relationship(type: "PATENTED", direction: IN)
  id: String
  org_name: String
  title: String
}

type PrincipalInvestigator {
  investigatedProjects: [Project!]!
    @relationship(type: "INVESTIGATED", direction: OUT)
  org_name: String
  org_state: String
  pi_id: String
  pi_name: String
}

type Project {
  DateCreatedRDAS: String
  abstract: String
  annotatedAnnotations: [Annotation!]!
    @relationship(
      type: "ANNOTATED"
      direction: OUT
      properties: "AnnotatedProperties"
    )
  application_id: BigInt
  application_type: BigInt
  funding_year: BigInt
  gardsresearchedBy: [GARD!]!
    @relationship(
      type: "RESEARCHED_BY"
      direction: IN
      properties: "ResearchedByProperties"
    )
  phr: String
  principalInvestigatorsInvestigated: [PrincipalInvestigator!]!
    @relationship(type: "INVESTIGATED", direction: IN)
  subproject_id: BigInt
  terms: [String]
  title: String
  total_cost: BigInt
  underCoreCoreProjects: [CoreProject!]!
    @relationship(type: "UNDER_CORE", direction: OUT)
}

type Publication {
  affiliation: String
  authors: [String]
  coreProjectsPublished: [CoreProject!]!
    @relationship(type: "PUBLISHED", direction: IN)
  date: String
  language: String
  pmc_id: BigInt
  pmid: BigInt
  publishedInJournals: [Journal!]!
    @relationship(
      type: "PUBLISHED_IN"
      direction: OUT
      properties: "PublishedInProperties"
    )
  title: String
}

type PublishedInProperties @relationshipProperties {
  issue: String
  page: String
  volume: String
}

type ResearchedByProperties @relationshipProperties {
  confidence_score: Float
  semantic_similarity: Float
}

type ProjectFilters {
  countsByYear: [FilterCount]
  fundingByYear: [FilterCount]
}

type FilterCount {
  term: String
  count: BigInt
  label: String
}

type Query {
  paginatedProjects(gardId: String, limit: Int, offset: Int): JSON
    @cypher(
      statement: """
      MATCH (n:GARD)
      WHERE n.GardId = $gardId
      MATCH (n)-[:RESEARCHED_BY]-(p:Project)-[:UNDER_CORE]-(c:CoreProject)
      with  count(p) as total, collect(p)[0] as titles, c.core_project_num as proj, c.rd_total_cost as cost
      with {core_project_num: proj, _projectCount: total, _rd_total_cost: cost, title: titles.title} as projList
      ORDER by projList.total desc
      skip $offset
      limit $limit
      return collect(projList) as ret
      """
      columnName: "ret"
    )
}

type Query {
  coreProjectsCount(gardId: String): Int
    @cypher(
      statement: """
      MATCH (n:GARD)
      WHERE n.GardId = $gardId
      MATCH (n)-[:RESEARCHED_BY]-(p:Project)-[:UNDER_CORE]-(c:CoreProject)
      WITH count(distinct(c)) as coreCount
      return coreCount
      """
      columnName: "coreCount"
    )
}

type Query {
  countsByYear(gardId: String): [FilterCount]
    @cypher(
      statement: """
      MATCH (d:GARD {GardId: $gardId})-[]-(p:Project)
      WITH toString(p.funding_year) as year, count(p) as ct
      return {term: year, count:ct, label: 'Project Counts by Year'} as yearCounts order by year DESC
      """
      columnName: "yearCounts"
    )
}

type Query {
  costByYear(gardId: String): [FilterCount]
    @cypher(
      statement: """
      MATCH (d:GARD {GardId: $gardId})-[]-(p:Project)
      WITH toString(p.funding_year) as year, sum(p.total_cost) as ct
      return {term: year, count:ct, label: 'Project Funding by Year'} as yearCounts order by year DESC
      """
      columnName: "yearCounts"
    )
}

type Query {
  allCountsByYear: [FilterCount]
    @cypher(
      statement: """
      MATCH (d:GARD)-[]-(p:Project)
      WITH toString(p.funding_year) as year, count(distinct(p)) as ct
      return {term: year, count:ct, label: 'Project Counts by Year'} as yearCounts order by year DESC
      """
      columnName: "yearCounts"
    )
}

type Query {
  allFundingByYear: [FilterCount]
    @cypher(
      statement: """
      MATCH (d:GARD)-[]-(p:Project)
      WITH toString(p.funding_year) as year, sum(p.total_cost) as ct
      return {term: year, count:ct, label: 'Project Funding by Year'} as yearCounts order by year DESC
      """
      columnName: "yearCounts"
    )
}
