scalar JSON
extend schema @mutation(operations: [])

type Article @node {
  abstractText: String
  affiliation: String
  citedByCount: BigInt
  DateCreatedRDAS: String
  doi: String
  epi_processed: Boolean
  firstPublicationDate: String
  hasPDF: Boolean
  hasPubtatorAnnotation: Boolean
  inEPMC: Boolean
  inPMC: Boolean
  isEpi: Boolean
  isNHS: Boolean
  is_genereview: Boolean
  isOpenAccess: Boolean
  LastUpdatedRDAS: String
  publicationYear: String
  pubmed_id: String
  pubType: [String]
  ReferenceOrigin: [String]
  source: String
  title: String

  appearsInJournalVolumes: [JournalVolume!]!
    @relationship(type: "APPEARS_IN", direction: OUT)
  authorsWrote: [Author!]! @relationship(type: "WROTE", direction: IN)
  epidemiologyAnnotationsEpidemiologyAnnotationFor: [EpidemiologyAnnotation!]!
    @relationship(
      type: "EPIDEMIOLOGY_ANNOTATION_FOR"
      direction: IN
      properties: "EpidemiologyAnnotationForProperties"
    )
  fullTextUrlsContentFor: [FullTextUrl!]!
    @relationship(type: "CONTENT_FOR", direction: IN)
  gardsmentionedIn: [GARD!]!
    @relationship(
      type: "MENTIONED_IN"
      direction: IN
      properties: "MentionedInProperties"
    )
  hasOmimRefomimRefs: [OMIMRef!]!
    @relationship(type: "HAS_OMIM_REF", direction: OUT)
  keywordsKeywordFor: [Keyword!]!
    @relationship(type: "KEYWORD_FOR", direction: IN)
  meshTermsMeshTermFor: [MeshTerm!]!
    @relationship(type: "MESH_TERM_FOR", direction: IN)
  pubtatorAnnotationsAnnotationFor: [PubtatorAnnotation!]!
    @relationship(type: "ANNOTATION_FOR", direction: IN)
  substancesSubstanceAnnotatedByPubmed: [Substance!]!
    @relationship(type: "SUBSTANCE_ANNOTATED_BY_PUBMED", direction: IN)
}

type Author {
  firstName: String
  fullName: String
  lastName: String
  wroteArticles: [Article!]! @relationship(type: "WROTE", direction: OUT)
}

type EpidemiologyAnnotation @node {
  DateCreatedRDAS: String
  LastUpdatedRDAS: String
  date: [String]
  epidemiologyAnnotationForArticles: [Article!]!
    @relationship(
      type: "EPIDEMIOLOGY_ANNOTATION_FOR"
      direction: OUT
      properties: "EpidemiologyAnnotationForProperties"
    )
  epidemiology_rate: [String]
  epidemiology_type: [String]
  ethnicity: [String]
  isEpi: Boolean
  location: [String]
  sex: [String]
}

type EpidemiologyAnnotationForProperties @relationshipProperties {
  epidemiology_probability: String
}

type FullTextUrl {
  availability: String
  availabilityCode: String
  contentForArticles: [Article!]!
    @relationship(type: "CONTENT_FOR", direction: OUT)
  documentStyle: String
  site: String
  url: String
}

type GARD {
  Classification: String
  GardId: String
  GardName: String
  Synonyms: [String]
  Type: [String]
  mentionedInArticles: [Article!]!
    @relationship(
      type: "MENTIONED_IN"
      direction: OUT
      properties: "MentionedInProperties"
    )
}

type Journal {
  essn: String
  issn: String
  journalVolumesContentOf: [JournalVolume!]!
    @relationship(type: "CONTENT_OF", direction: IN)
  medlineAbbreviation: String
  nlmid: String
  title: String
}

type JournalVolume {
  articlesAppearsIn: [Article!]!
    @relationship(type: "APPEARS_IN", direction: IN)
  contentOfJournals: [Journal!]!
    @relationship(type: "CONTENT_OF", direction: OUT)
  dateOfPublication: String
  issue: String
  journalIssueId: BigInt
  monthOfPublication: BigInt
  printPublicationDate: String
  volume: String
  yearOfPublication: BigInt
}

type Keyword {
  keyword: String
  keywordForArticles: [Article!]!
    @relationship(type: "KEYWORD_FOR", direction: OUT)
}

type MentionedInProperties @relationshipProperties {
  MatchedTermRDAS: String
}

type MeshQualifier {
  abbreviation: String
  isMajorTopic: Boolean
  majorTopic_YN: String
  meshQualifierForMeshTerms: [MeshTerm!]!
    @relationship(type: "MESH_QUALIFIER_FOR", direction: OUT)
  qualifierName: String
}

type MeshTerm {
  descriptorName: String
  isMajorTopic: Boolean
  majorTopic_YN: String
  meshQualifiersMeshQualifierFor: [MeshQualifier!]!
    @relationship(type: "MESH_QUALIFIER_FOR", direction: IN)
  meshTermForArticles: [Article!]!
    @relationship(type: "MESH_TERM_FOR", direction: OUT)
}

type OMIMRef {
  DateCreatedRDAS: String
  LastUpdatedRDAS: String
  articlesHasOmimRef: [Article!]!
    @relationship(type: "HAS_OMIM_REF", direction: IN)
  omimId: BigInt
  omimName: String
  omimSections: [String]
}

type PubtatorAnnotation {
  DateCreatedRDAS: String
  LastUpdatedRDAS: String
  annotationForArticles: [Article!]!
    @relationship(type: "ANNOTATION_FOR", direction: OUT)
  infons_identifier: String
  infons_type: String
  text: [String]
  type: String
}

type Substance {
  name: String
  registryNumber: String
  substanceAnnotatedByPubmedArticles: [Article!]!
    @relationship(type: "SUBSTANCE_ANNOTATED_BY_PUBMED", direction: OUT)
}

type FilterCount {
  term: String
  count: Int
  label: String
}

type Query {
  countsByYear(gardId: String): [FilterCount]
    @cypher(
      statement: """
      match (d:GARD {GardId: $gardId})-[]-(a:Article)
      WHERE a.publicationYear IS NOT NULL
      WITH a.publicationYear as year
      with count(year) as ct, year
      RETURN {term: year, count: ct, label: 'Articles'} as yearCounts order by year DESC
      """
      columnName: "yearCounts"
    )
}

type Query {
  countsByEpi(gardId: String): [FilterCount]
    @cypher(
      statement: """
      match (d:GARD {GardId: $gardId})-[]-(a:Article)
      WITH a.isEpi as isEpi
      with count(isEpi) as ct, isEpi
      RETURN {term: isEpi, count: ct, label: 'Epidemiology Articles'} as epiCounts order by isEpi DESC
      """
      columnName: "epiCounts"
    )
}

type Query {
  countsByNHS(gardId: String): [FilterCount]
    @cypher(
      statement: """
      match (d:GARD {GardId: $gardId})-[]-(a:Article)
      WITH a.isNHS as isNhs
      with count(isNhs) as ct, isNhs
      RETURN {term: isNhs, count: ct, label: 'Natural Health Study Articles'} as nhsCounts order by isNhs DESC
      """
      columnName: "nhsCounts"
    )
}

type Query {
  allCountsByYear: [FilterCount]
    @cypher(
      statement: """
      match (a:Article)<-[:MENTIONED_IN]-(:GARD)
      WITH a.publicationYear as year
      with count(year) as ct, year
      RETURN {term: year, count: ct, label: 'Articles'} as yearCounts order by year DESC
      """
      columnName: "yearCounts"
    )
}
